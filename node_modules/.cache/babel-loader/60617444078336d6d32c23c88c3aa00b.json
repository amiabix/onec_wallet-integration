{"ast":null,"code":"var _jsxFileName = \"/Users/ayushbhadauria/Desktop/onec-react-boilerplate/src/components/OnecLogin.js\";\nimport React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Onec from \"onec-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass OnecLogin extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoggedIn: false,\n      userAddress: \"\"\n    };\n    var account; // https://docs.walletconnect.com/quick-start/dapps/web3-provider\n\n    var provider = new WalletConnectProvider.default({\n      rpc: {\n        1: \"https://cloudflare-eth.com/\",\n        // https://ethereumnodes.com/\n        137: \"https://polygon-rpc.com/\" // https://docs.polygon.technology/docs/develop/network-details/network/\n        // ...\n\n      } // bridge: 'https://bridge.walletconnect.org',\n\n    });\n\n    var connectWC = async () => {\n      await provider.enable(); //  Create Web3 instance\n\n      const web3 = new Web3(provider);\n      window.w3 = web3;\n      var accounts = await web3.eth.getAccounts(); // get all connected accounts\n\n      userAddress = accounts[0]; // get the primary account\n    };\n\n    var sign = async msg => {\n      if (w3) {\n        return await w3.eth.personal.sign(msg, userAddress);\n      } else {\n        return false;\n      }\n    };\n\n    var contract = async (abi, address) => {\n      if (w3) {\n        return new w3.eth.Contract(abi, address);\n      } else {\n        return false;\n      }\n    };\n\n    var disconnect = async () => {\n      // Close provider session\n      await provider.disconnect();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.isLoggedIn == false ? /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: () => {\n          Onec.auth.withMetamask().then(response => {\n            this.setState({\n              isLoggedIn: true,\n              userAddress: response.user.address\n            });\n            console.log(response);\n          }).catch(error => {\n            console.log(error);\n          });\n        },\n        children: \"Login with Metamask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: () => {},\n        children: \"Login Walletconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Login Successful\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 43\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"User Address: \", this.state.userAddress]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 69\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 38\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default OnecLogin;","map":{"version":3,"sources":["/Users/ayushbhadauria/Desktop/onec-react-boilerplate/src/components/OnecLogin.js"],"names":["React","Button","Onec","OnecLogin","Component","constructor","props","state","isLoggedIn","userAddress","account","provider","WalletConnectProvider","default","rpc","connectWC","enable","web3","Web3","window","w3","accounts","eth","getAccounts","sign","msg","personal","contract","abi","address","Contract","disconnect","render","auth","withMetamask","then","response","setState","user","console","log","catch","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,UAAjB;;;AAEA,MAAMC,SAAN,SAAwBH,KAAK,CAACI,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,KADD;AAEXC,MAAAA,WAAW,EAAE;AAFF,KAAb;AAIA,QAAIC,OAAJ,CANiB,CAQT;;AACA,QAAIC,QAAQ,GAAG,IAAIC,qBAAqB,CAACC,OAA1B,CAAkC;AAC/CC,MAAAA,GAAG,EAAE;AACH,WAAG,6BADA;AAC+B;AAClC,aAAK,0BAFF,CAE8B;AACjC;;AAHG,OAD0C,CAO/C;;AAP+C,KAAlC,CAAf;;AAUR,QAAIC,SAAS,GAAG,YAAY;AAC1B,YAAMJ,QAAQ,CAACK,MAAT,EAAN,CAD0B,CAG1B;;AACA,YAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASP,QAAT,CAAb;AACAQ,MAAAA,MAAM,CAACC,EAAP,GAAYH,IAAZ;AAEA,UAAII,QAAQ,GAAI,MAAMJ,IAAI,CAACK,GAAL,CAASC,WAAT,EAAtB,CAP0B,CAOoB;;AAC9Cd,MAAAA,WAAW,GAAGY,QAAQ,CAAC,CAAD,CAAtB,CAR0B,CAQC;AAC5B,KATD;;AAUA,QAAIG,IAAI,GAAG,MAAOC,GAAP,IAAe;AACxB,UAAIL,EAAJ,EAAQ;AACN,eAAO,MAAMA,EAAE,CAACE,GAAH,CAAOI,QAAP,CAAgBF,IAAhB,CAAqBC,GAArB,EAA0BhB,WAA1B,CAAb;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF,KAND;;AAOA,QAAIkB,QAAQ,GAAG,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;AACrC,UAAIT,EAAJ,EAAQ;AACN,eAAO,IAAIA,EAAE,CAACE,GAAH,CAAOQ,QAAX,CAAoBF,GAApB,EAAyBC,OAAzB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF,KAND;;AAQA,QAAIE,UAAU,GAAG,YAAY;AAC3B;AACA,YAAMpB,QAAQ,CAACoB,UAAT,EAAN;AACD,KAHD;AAID;;AACDC,EAAAA,MAAM,GAAG;AACP,wBAEE;AAAA,iBACK,KAAKzB,KAAL,CAAWC,UAAX,IAAuB,KAAvB,gBACH,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,OAAO,EAC/B,MAAM;AACFN,UAAAA,IAAI,CAAC+B,IAAL,CAAUC,YAAV,GAAyBC,IAAzB,CAA+BC,QAAD,IAAc;AACxC,iBAAKC,QAAL,CAAc;AAAC7B,cAAAA,UAAU,EAAE,IAAb;AAAmBC,cAAAA,WAAW,EAAE2B,QAAQ,CAACE,IAAT,CAAcT;AAA9C,aAAd;AACAU,YAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACH,WAHD,EAGGK,KAHH,CAGUC,KAAD,IAAW;AAACH,YAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AAAmB,WAHxC;AAIH,SANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,GAQ4B,IATjC,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,OAAO,EAC/B,MAAM,CAEL,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAgBA;AAAA,kBACK,KAAKnC,KAAL,CAAWC,UAAX,gBAAwB;AAAA,kCAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAL,oBAA+B;AAAA,yCAAkB,KAAKD,KAAL,CAAWE,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAxB,GAA8G;AADnH;AAAA;AAAA;AAAA;AAAA,cAhBA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAwBD;;AA3EmC;;AA8EtC,eAAeN,SAAf","sourcesContent":["import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Onec from \"onec-sdk\";\n\nclass OnecLogin extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        isLoggedIn: false,\n        userAddress: \"\",\n      };\n      var account;\n\n              // https://docs.walletconnect.com/quick-start/dapps/web3-provider\n              var provider = new WalletConnectProvider.default({\n                rpc: {\n                  1: \"https://cloudflare-eth.com/\", // https://ethereumnodes.com/\n                  137: \"https://polygon-rpc.com/\", // https://docs.polygon.technology/docs/develop/network-details/network/\n                  // ...\n          \n                },\n                // bridge: 'https://bridge.walletconnect.org',\n              });\n          \n      var connectWC = async () => {\n        await provider.enable();\n  \n        //  Create Web3 instance\n        const web3 = new Web3(provider);\n        window.w3 = web3\n  \n        var accounts  = await web3.eth.getAccounts(); // get all connected accounts\n        userAddress = accounts[0]; // get the primary account\n      }\n      var sign = async (msg) => {\n        if (w3) {\n          return await w3.eth.personal.sign(msg, userAddress)\n        } else {\n          return false\n        }\n      }\n      var contract = async (abi, address) => {\n        if (w3) {\n          return new w3.eth.Contract(abi, address)\n        } else {\n          return false\n        }\n      }\n  \n      var disconnect = async () => {\n        // Close provider session\n        await provider.disconnect()\n      }\n    }\n    render() {\n      return (\n        \n        <div>\n            {this.state.isLoggedIn==false ? \n          <Button variant=\"primary\" onClick={\n            () => { \n                Onec.auth.withMetamask().then((response) => {\n                    this.setState({isLoggedIn: true, userAddress: response.user.address});\n                    console.log(response)\n                }).catch((error) => {console.log(error)});\n            }\n          }>Login with Metamask</Button>:null}\n          <span> </span>\n          <Button variant=\"primary\" onClick={\n            () => {\n          \n            }\n          }>Login Walletconnect</Button>\n        <div>\n            {this.state.isLoggedIn ? <div><h3>Login Successful</h3> <p>User Address: {this.state.userAddress}</p> </div> : null}\n        </div>\n        </div>\n\n      );\n    }\n  }\n\n  export default OnecLogin;\n  "]},"metadata":{},"sourceType":"module"}